-- Create the database_schemas table if it doesn't exist
-- Note: Based on the screenshot, this table already exists with different columns
-- We'll alter it to match our needs
ALTER TABLE IF EXISTS public.database_schemas
  ADD COLUMN IF NOT EXISTS schema_data json,
  ADD COLUMN IF NOT EXISTS user_id uuid;

-- If the table doesn't exist, create it
CREATE TABLE IF NOT EXISTS public.database_schemas (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  connection_id uuid REFERENCES public.database_connections(id) ON DELETE CASCADE,
  schema json,
  created_at timestamptz DEFAULT NOW(),
  schema_data json,
  user_id uuid
);

-- Add RLS policies for database_schemas
ALTER TABLE public.database_schemas ENABLE ROW LEVEL SECURITY;

-- Drop existing policies if they exist
DROP POLICY IF EXISTS "Users can view their own schemas" ON public.database_schemas;
DROP POLICY IF EXISTS "Users can insert their own schemas" ON public.database_schemas;
DROP POLICY IF EXISTS "Users can update their own schemas" ON public.database_schemas;
DROP POLICY IF EXISTS "Users can delete their own schemas" ON public.database_schemas;

-- Create new policies
CREATE POLICY "Users can view their own schemas"
  ON public.database_schemas
  FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own schemas"
  ON public.database_schemas
  FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own schemas"
  ON public.database_schemas
  FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own schemas"
  ON public.database_schemas
  FOR DELETE
  USING (auth.uid() = user_id);

-- Create the chats table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.chats (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
  title text NOT NULL,
  created_at timestamptz DEFAULT NOW(),
  updated_at timestamptz DEFAULT NOW()
);

-- Add RLS policies for chats
ALTER TABLE public.chats ENABLE ROW LEVEL SECURITY;

-- Drop existing policies if they exist
DROP POLICY IF EXISTS "Users can view their own chats" ON public.chats;
DROP POLICY IF EXISTS "Users can insert their own chats" ON public.chats;
DROP POLICY IF EXISTS "Users can update their own chats" ON public.chats;
DROP POLICY IF EXISTS "Users can delete their own chats" ON public.chats;

-- Create new policies
CREATE POLICY "Users can view their own chats"
  ON public.chats
  FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own chats"
  ON public.chats
  FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own chats"
  ON public.chats
  FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own chats"
  ON public.chats
  FOR DELETE
  USING (auth.uid() = user_id);

-- Create the chat_connections table
CREATE TABLE IF NOT EXISTS public.chat_connections (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  chat_id uuid REFERENCES public.chats(id) ON DELETE CASCADE,
  connection_id uuid REFERENCES public.database_connections(id) ON DELETE CASCADE,
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
  updated_at timestamptz DEFAULT NOW(),
  UNIQUE(chat_id, user_id)
);

-- Add RLS policies for chat_connections
ALTER TABLE public.chat_connections ENABLE ROW LEVEL SECURITY;

-- Drop existing policies if they exist
DROP POLICY IF EXISTS "Users can view their own chat connections" ON public.chat_connections;
DROP POLICY IF EXISTS "Users can insert their own chat connections" ON public.chat_connections;
DROP POLICY IF EXISTS "Users can update their own chat connections" ON public.chat_connections;
DROP POLICY IF EXISTS "Users can delete their own chat connections" ON public.chat_connections;

-- Create new policies
CREATE POLICY "Users can view their own chat connections"
  ON public.chat_connections
  FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own chat connections"
  ON public.chat_connections
  FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own chat connections"
  ON public.chat_connections
  FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own chat connections"
  ON public.chat_connections
  FOR DELETE
  USING (auth.uid() = user_id);

-- Add indexes for better performance
CREATE INDEX IF NOT EXISTS idx_database_schemas_connection_id ON public.database_schemas(connection_id);
CREATE INDEX IF NOT EXISTS idx_database_schemas_user_id ON public.database_schemas(user_id);
CREATE INDEX IF NOT EXISTS idx_chats_user_id ON public.chats(user_id);
CREATE INDEX IF NOT EXISTS idx_chat_connections_chat_id ON public.chat_connections(chat_id);
CREATE INDEX IF NOT EXISTS idx_chat_connections_connection_id ON public.chat_connections(connection_id);
CREATE INDEX IF NOT EXISTS idx_chat_connections_user_id ON public.chat_connections(user_id);
